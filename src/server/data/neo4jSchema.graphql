type Student {
  sid: String!
  name: String
  hostel: String!
  age: Int
  gender: String
  hasTrait: [HasTrait]
  matched: [Student] @relation(name: "MATCHED", direction: "BOTH")
}

type Trait {
  name: ID!
  studentTraits: [HasTrait]
}

type HasTrait @relation(name: "HAS_TRAIT") {
  from: Student
  to: Trait
  strength: Int!
}

type Query {
  studentBySubstring(substring: String): [Student]
    @cypher(
      statement: "MATCH (s:Student) WHERE s.name CONTAINS $substring RETURN s"
    )
  similar(sid: String, hostel: String): [Student]
    @cypher(
      statement: """
      MATCH (s1:Student {sid: $sid})-[has1:HAS_TRAIT]->(trait)
      MATCH (s2:Student {hostel: $hostel})-[has2:HAS_TRAIT]->(trait) WHERE s1<>s2
      RETURN s2,
      gds.alpha.similarity.cosine(collect(has1.strength), collect(has2.strength)) AS similarity
      ORDER BY similarity DESC
      """
    )
}

type Mutation {
  updateAgain(sid: String): Int
    @cypher(
      statement: "Match (s1:Student {sid: $sid}) DETACH DELETE s1 RETURN s1"
    )
}
